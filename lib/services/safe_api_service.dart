import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../config/app_config.dart';

class SafeApiService {
  static String get prodUrl => AppConfig.baseApiUrl;
  static const Duration timeout = Duration(seconds: 5);
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
  static Future<Map<String, dynamic>> safeRequest(
    String endpoint, {
    String method = 'GET',
    Map<String, dynamic>? body,
    Map<String, String>? headers,
  }) async {
    try {
      final uri = Uri.parse('${AppConfig.baseApiUrl}$endpoint');
      print('üåê SafeAPI Request: $method $uri');
      
      final defaultHeaders = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        ...?headers,
      };
      
      http.Response response;
      
      switch (method.toUpperCase()) {
        case 'POST':
          response = await http.post(
            uri,
            headers: defaultHeaders,
            body: body != null ? jsonEncode(body) : null,
          ).timeout(timeout);
          break;
        case 'PUT':
          response = await http.put(
            uri,
            headers: defaultHeaders,
            body: body != null ? jsonEncode(body) : null,
          ).timeout(timeout);
          break;
        case 'DELETE':
          response = await http.delete(
            uri,
            headers: defaultHeaders,
          ).timeout(timeout);
          break;
        default:
          response = await http.get(
            uri,
            headers: defaultHeaders,
          ).timeout(timeout);
      }
      
      print('üåê SafeAPI Response: ${response.statusCode}');
      
      if (response.statusCode >= 200 && response.statusCode < 300) {
        final data = response.body.isNotEmpty 
            ? jsonDecode(response.body) 
            : {};
        return {
          'success': true,
          'data': data,
          'statusCode': response.statusCode,
        };
      } else {
        return {
          'success': false,
          'error': 'HTTP ${response.statusCode}',
          'statusCode': response.statusCode,
        };
      }
    } catch (e) {
      print('üî¥ SafeApiService: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ $endpoint - $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
        'statusCode': 0,
      };
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
  static Future<bool> isServerAvailable() async {
    try {
      final result = await safeRequest('/vehicles/', headers: {'timeout': '3'});
      return result['success'] == true;
    } catch (e) {
      return false;
    }
  }
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  static Future<Map<String, dynamic>> safeLogin(String username, String password) async {
    try {
      print('SafeApiService: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è $username');
      print('SafeApiService: URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${AppConfig.baseApiUrl}/v1/auth/token/');
      
      final result = await safeRequest('/v1/auth/token/', 
        method: 'POST',
        body: {
          'username': username,
          'password': password,
        },
      );
      
      print('SafeApiService: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${result['success']}');
      print('SafeApiService: –°—Ç–∞—Ç—É—Å –∫–æ–¥: ${result['statusCode']}');
      if (result['data'] != null) {
        print('SafeApiService: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: ${result['data']}');
      }
      
      if (result['success'] && result['data'] != null) {
        print('SafeApiService: –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API');
        
        final tokenData = result['data'];
        final accessToken = tokenData['access'];
        final refreshToken = tokenData['refresh'];
        
        print('SafeApiService: Access token –ø–æ–ª—É—á–µ–Ω: ${accessToken != null ? '–¥–∞' : '–Ω–µ—Ç'}');
        print('SafeApiService: Refresh token –ø–æ–ª—É—á–µ–Ω: ${refreshToken != null ? '–¥–∞' : '–Ω–µ—Ç'}');
        
        if (accessToken != null) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
          final prefs = await SharedPreferences.getInstance();
          await prefs.setString('auth_token', accessToken);
          await prefs.setString('refresh_token', refreshToken);
          
          print('SafeApiService: –†–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${accessToken.substring(0, 20)}...');
          
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          print('SafeApiService: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
          final userResult = await safeRequest('/v1/users/me/', 
            headers: {
              'Authorization': 'Bearer $accessToken',
            },
          );
          
          print('SafeApiService: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userResult['success']}');
          print('SafeApiService: –°—Ç–∞—Ç—É—Å –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userResult['statusCode']}');
          
          if (userResult['success'] && userResult['data'] != null) {
            final userData = userResult['data'];
            await prefs.setString('user_profile', jsonEncode(userData));
            await prefs.setString('user_role', userData['role'] ?? '');
            await prefs.setInt('user_id', userData['id'] ?? 0);
            
            print('SafeApiService: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã - —Ä–æ–ª—å: ${userData['role']}');
            print('SafeApiService: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData['id']}');
            print('SafeApiService: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData['first_name']} ${userData['last_name']}');
            print('SafeApiService: –§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userData['photo']}');
            
            return {
              'success': true,
              'data': userData,
            };
          } else {
            print('SafeApiService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userResult['error']}');
            return {
              'success': false,
              'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            };
          }
        } else {
          print('SafeApiService: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
          return {
            'success': false,
            'error': '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω',
          };
        }
      } else {
        print('SafeApiService: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API: ${result['error']}');
        return {
          'success': false,
          'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        };
      }
    } catch (e) {
      print('SafeApiService: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }
  
  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å fallback
  static Future<Map<String, dynamic>> safeLoadData(
    String endpoint, {
    Map<String, dynamic>? fallbackData,
    String? authToken,
  }) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
      final isAvailable = await isServerAvailable();
      
      if (!isAvailable) {
        print('SafeApiService: –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ');
        return {
          'success': true,
          'data': fallbackData,
          'source': 'fallback',
          'warning': '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
        };
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      final headers = <String, String>{};
      if (authToken != null) {
        headers['Authorization'] = 'Bearer $authToken';
      }
      
      final result = await safeRequest(endpoint, headers: headers);
      
      if (result['success']) {
        return {
          'success': true,
          'data': result['data'],
          'source': 'server',
        };
      } else {
        print('SafeApiService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${result['error']}');
        return {
          'success': true,
          'data': fallbackData,
          'source': 'fallback',
          'warning': '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
        };
      }
    } catch (e) {
      print('SafeApiService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e');
      return {
        'success': true,
        'data': fallbackData,
        'source': 'fallback',
        'warning': '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
      };
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static Future<Map<String, dynamic>> updateUserProfile({
    required String firstName,
    required String lastName,
    required String email,
    required String phone,
    String? profilePicture,
    bool removeAvatar = false,
  }) async {
    try {
      print('SafeApiService: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString('auth_token');
      
      if (token == null) {
        return {
          'success': false,
          'error': '–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω',
        };
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      final updateData = <String, dynamic>{
        'first_name': firstName,
        'last_name': lastName,
        'email': email,
        'phone': phone,
      };

      if (removeAvatar) {
        updateData['photo'] = null;
      } else if (profilePicture != null) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ —Ñ–∞–π–ª
        try {
          final file = File(profilePicture);
          if (await file.exists()) {
            final bytes = await file.readAsBytes();
            final base64Image = base64Encode(bytes);
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            final extension = profilePicture.split('.').last.toLowerCase();
            final mimeType = extension == 'jpg' || extension == 'jpeg' 
                ? 'image/jpeg' 
                : extension == 'png' 
                    ? 'image/png' 
                    : 'image/jpeg';
            updateData['photo'] = 'data:$mimeType;base64,$base64Image';
            print('SafeApiService: –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –≤ base64');
          } else {
            print('SafeApiService: –§–∞–π–ª —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω: $profilePicture');
          }
        } catch (e) {
          print('SafeApiService: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: $e');
        }
      }

      print('SafeApiService: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: $updateData');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
      final result = await safeRequest('/v1/users/me/', 
        method: 'PUT',
        headers: {
          'Authorization': 'Bearer $token',
        },
        body: updateData,
      );

      if (result['success'] && result['data'] != null) {
        print('SafeApiService: –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await prefs.setString('user_profile', jsonEncode(result['data']));
        
        return {
          'success': true,
          'data': result['data'],
        };
      } else {
        print('SafeApiService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${result['error']}');
        return {
          'success': false,
          'error': result['error'] ?? '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è',
        };
      }
    } catch (e) {
      print('SafeApiService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  static Future<Map<String, dynamic>> refreshAuthToken() async {
    try {
      print('SafeApiService: –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞...');
      
      final prefs = await SharedPreferences.getInstance();
      final refreshToken = prefs.getString('refresh_token');
      
      if (refreshToken == null) {
        print('SafeApiService: Refresh —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return {
          'success': false,
          'error': 'Refresh —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω',
        };
      }

      final result = await safeRequest('/v1/auth/token/refresh/', 
        method: 'POST',
        body: {
          'refresh': refreshToken,
        },
      );

      if (result['success'] && result['data'] != null) {
        final tokenData = result['data'];
        final newAccessToken = tokenData['access'];
        
        if (newAccessToken != null) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
          await prefs.setString('auth_token', newAccessToken);
          
          print('SafeApiService: –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: ${newAccessToken.substring(0, 20)}...');
          
          return {
            'success': true,
            'data': {
              'access_token': newAccessToken,
            },
          };
        } else {
          print('SafeApiService: –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
          return {
            'success': false,
            'error': '–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω',
          };
        }
      } else {
        print('SafeApiService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${result['error']}');
        return {
          'success': false,
          'error': '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞',
        };
      }
    } catch (e) {
      print('SafeApiService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: $e');
      return {
        'success': false,
        'error': '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: $e',
      };
    }
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  static Future<String?> forceRefreshToken() async {
    try {
      print('SafeApiService: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...');
      
      final refreshResult = await refreshAuthToken();
      if (refreshResult['success']) {
        print('SafeApiService: –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ');
        return refreshResult['data']['access_token'];
      } else {
        print('SafeApiService: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ');
        return null;
      }
    } catch (e) {
      print('SafeApiService: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: $e');
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º)
  static Future<String?> getValidToken() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      String? token = prefs.getString('auth_token');
      
      if (token == null) {
        print('SafeApiService: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω, –ø—ã—Ç–∞—è—Å—å —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      final testResult = await safeRequest('/v1/users/me/', 
        headers: {
          'Authorization': 'Bearer $token',
        },
      );

      if (testResult['success']) {
        print('SafeApiService: –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');
        return token;
      } else if (testResult['statusCode'] == 401 || testResult['statusCode'] == 403) {
        print('SafeApiService: –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ (${testResult['statusCode']}), –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...');
        
        final refreshResult = await refreshAuthToken();
        if (refreshResult['success']) {
          return refreshResult['data']['access_token'];
        } else {
          print('SafeApiService: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω');
          return null;
        }
      } else {
        print('SafeApiService: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: ${testResult['error']}');
        return token; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
      }
    } catch (e) {
      print('SafeApiService: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: $e');
      return null;
    }
  }
}