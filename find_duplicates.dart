import 'dart:io';

void main() async {
  print('üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π fontFamily...');
  
  // –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  final files = [
    'lib/screens/employees_screen.dart',
    'lib/screens/vehicles_screen.dart',
    'lib/screens/tasks_screen.dart',
    'lib/screens/trip_details_screen.dart',
    'lib/components/app_header.dart',
    'lib/components/web_image.dart',
    'lib/screens/profile_screen.dart',
    'lib/screens/expenses_screen.dart',
  ];
  
  for (final file in files) {
    await findDuplicatesInFile(file);
  }
  
  print('‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

Future<void> findDuplicatesInFile(String filePath) async {
  try {
    final file = File(filePath);
    if (!await file.exists()) {
      print('‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $filePath');
      return;
    }
    
    String content = await file.readAsString();
    final lines = content.split('\n');
    
    for (int i = 0; i < lines.length; i++) {
      final line = lines[i];
      if (line.contains('fontFamily:') && line.contains('fontFamily:')) {
        print('‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ $filePath –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 1}:');
        print('   $line');
      }
    }
    
  } catch (e) {
    print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ $filePath: $e');
  }
} 
 
 
 
 